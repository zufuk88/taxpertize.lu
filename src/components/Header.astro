---
export interface Props {
  activePage?: 'home' | 'blog' | 'services' | 'about' | 'contact';
}

const { activePage = 'home' } = Astro.props;
const currentPath = Astro.url.pathname;
---

<header class="site-header">
  <nav class="site-nav">
    <div class="container">
      <div class="nav-content">
        <a href="/" class="nav-logo">Taxpertize</a>

        <div class="nav-links">
          <a href="/" class={currentPath === '/' ? 'active' : ''} data-section="home">
            Home
          </a>
          <a href="/#services" data-section="services">
            Services
          </a>
          <a href="/#about" data-section="about">
            About
          </a>
          <a href="/#faq" data-section="faq">
            FAQ
          </a>
          <a href="/blog" class="nav-cta" class:list={[currentPath.startsWith('/blog') && 'active']}>
            Blog
          </a>
        </div>

        <button class="nav-toggle" aria-label="Toggle navigation">
          <span class="nav-toggle-line"></span>
          <span class="nav-toggle-line"></span>
          <span class="nav-toggle-line"></span>
        </button>
      </div>
    </div>
  </nav>
</header>

<style>
  .site-header {
    position: sticky;
    top: 0;
    z-index: 1000;
    background: var(--color-background);
    border-bottom: 1px solid var(--color-border);
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
  }

  .site-nav {
    padding: var(--space-xs) 0;
  }

  .nav-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .nav-logo {
    font-size: var(--font-size-xl);
    font-weight: 900;
    color: var(--color-primary);
    text-decoration: none;
    letter-spacing: -0.02em;
    transition: opacity 0.3s ease;
  }

  .nav-logo:hover {
    opacity: 0.8;
  }

  .nav-links {
    display: flex;
    gap: var(--space-md);
    align-items: center;
  }

  .nav-links a {
    color: var(--color-text);
    text-decoration: none;
    font-weight: 500;
    font-size: var(--font-size-sm);
    transition: color 0.3s ease;
    position: relative;
  }

  .nav-links a:not(.nav-cta)::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--color-primary);
    transition: width 0.3s ease;
  }

  .nav-links a:not(.nav-cta):hover::after,
  .nav-links a.active:not(.nav-cta)::after {
    width: 100%;
  }

  .nav-links a:hover,
  .nav-links a.active {
    color: var(--color-primary);
  }

  .nav-cta {
    padding: 6px var(--space-sm);
    background: var(--color-primary);
    color: var(--color-background) !important;
    border-radius: var(--radius-md);
    border: 2px solid var(--color-primary);
    transition: all 0.3s ease;
    font-size: var(--font-size-sm);
  }

  .nav-cta:hover {
    background: transparent;
    color: var(--color-primary) !important;
  }

  .nav-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--space-xs);
    flex-direction: column;
    gap: 4px;
  }

  .nav-toggle-line {
    display: block;
    width: 24px;
    height: 2px;
    background: var(--color-primary);
    transition: all 0.3s ease;
  }

  /* Tablet and Mobile */
  @media (max-width: 768px) {
    .nav-toggle {
      display: flex;
    }

    .nav-links {
      position: fixed;
      top: 60px;
      left: 0;
      right: 0;
      background: var(--color-background);
      flex-direction: column;
      padding: var(--space-lg);
      border-bottom: 1px solid var(--color-border);
      transform: translateY(-100%);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(0, 52, 43, 0.1);
    }

    .nav-links.active {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }

    .nav-links a {
      width: 100%;
      padding: var(--space-sm) 0;
      text-align: center;
    }

    .nav-cta {
      width: 100%;
      text-align: center;
    }
  }

  /* Mobile specific */
  @media (max-width: 480px) {
    .nav-logo {
      font-size: var(--font-size-lg);
    }
  }
</style>

<script>
  // Mobile menu toggle and scroll spy
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.querySelector('.nav-toggle');
    const menu = document.querySelector('.nav-links');

    toggle?.addEventListener('click', () => {
      menu?.classList.toggle('active');
      toggle.classList.toggle('active');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!toggle?.contains(target) && !menu?.contains(target)) {
        menu?.classList.remove('active');
        toggle?.classList.remove('active');
      }
    });

    // Close menu when clicking on a link
    const links = document.querySelectorAll('.nav-links a');
    links.forEach(link => {
      link.addEventListener('click', () => {
        menu?.classList.remove('active');
        toggle?.classList.remove('active');
      });
    });

    // Scroll spy for active menu items
    const sections = document.querySelectorAll('section[id], .hero');
    const navLinks = document.querySelectorAll('.nav-links a[data-section]');

    // Only activate scroll spy on home page
    if (window.location.pathname === '/') {
      const observerOptions = {
        rootMargin: '-20% 0px -70% 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id || 'home';

            // Remove active class from all links
            navLinks.forEach(link => {
              link.classList.remove('active');
            });

            // Add active class to current section link
            const activeLink = document.querySelector(`.nav-links a[data-section="${sectionId}"]`);
            if (activeLink) {
              activeLink.classList.add('active');
            }

            // Special case for hero section (home)
            if (entry.target.classList.contains('hero') && !entry.target.id) {
              const homeLink = document.querySelector('.nav-links a[data-section="home"]');
              if (homeLink) {
                navLinks.forEach(link => link.classList.remove('active'));
                homeLink.classList.add('active');
              }
            }
          }
        });
      }, observerOptions);

      sections.forEach(section => {
        observer.observe(section);
      });
    }
  });
</script>